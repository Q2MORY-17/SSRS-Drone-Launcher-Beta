pipeline {
    agent any
    stages {
	stage('Checkout') {
	    steps {
		git url:'https://github.com/Q2MORY17/SSRS-Drone-Launcher-Beta.git', branch:'master'
	    }
	}
	stage('Robot') {
	    steps {
		catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
		    sh 'robot -T -d test/results test/manual/robot/launch_invalid_inputs.robot'
		}
		catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
		    sh 'robot -T -d test/results test/manual/robot/resizeWindowWithoutSh.robot'		
		}
		sh 'robot -T -d test/results test/manual/robot/launch.robot'
		sh 'robot -T -d test/results test/automatic/robot/automatic.robot'
		sh 'robot -T -d test/results test/manual/robot/pitch.robot'
		sh 'robot -T -d test/results test/manual/robot/rotateWithoutSh.robot'		
		dir("test/manual/robot") {
    		    sh 'resources/run_tests_headless.sh MaxMin.robot'
    		    sh 'resources/run_tests_headless.sh HalfWindow.robot'
    		    sh 'resources/run_tests_headless.sh videoWindowButtonTest.robot'
    		    sh 'resources/run_tests_headless.sh lift.robot'
    		    sh 'resources/run_tests_headless.sh positionWindow.robot'
    		    sh 'resources/run_tests_headless.sh resizeWindow.robot'
    		    sh 'resources/run_tests_headless.sh rotate.robot'
    		    sh 'resources/run_tests_headless.sh rotate.boundaries.robot'
		}
		sh 'robot -T -d test/results --variable BROWSER:headlesschrome test/settings/robot/DroneTest.robot'
		sh 'robot -T -d test/results --variable BROWSER:headlesschrome test/manual/robot/OptionButtons.robot'
	    }
	    post {
		always {
		    chuckNorris()
		}
	    }
	}
	stage('Drone Launcher Unit Tests') {
	    steps {
		catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
		    sh 'python3 -m pytest -v -s test/manual/unittest/test_manual_launcher_python.py'
		}
		sh 'python3 -m pytest -v -s test/automatic/unittest/test_automatic_mount_function.py'
		sh 'python3 -m pytest -v -s test/automatic/unittest/test_automatic_stop_function.py'
		sh 'python3 -m pytest -v -s test/automatic/unittest/test_automatic_prepare_function.py'
		sh 'python3 -m pytest -v -s test/automatic/unittest/test_automatic_standby_function.py'
		sh 'python3 -m pytest -v -s test/automatic/unittest/test_automatic_launch_function.py'
		catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
		    sh 'python3 -m pytest -v -s test/manual/unittest/test_drone_launcher_rotate.py'
		}
		sh 'python3 -m pytest -v -s test/manual/unittest/test_dronelauncher_python.py'
		sh 'python3 -m pytest -v -s test/settings/unittest/test_dronelauncher_python.py'
		catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
		    sh 'python3 -m pytest -v -s test/manual/unittest/test_drone_launcher_lift.py'
		}
		sh 'python3 -m pytest -v -s test/manual/unittest/test_drone_launcher_MaxMin.py'
		catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {		
		    sh 'python3 -m pytest -v -s test/manual/unittest/test_drone_launcher_rotate.py'
		}
		catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {		
		    sh 'python3 -m pytest -v -s test/manual/unittest/test_pitch.py'
		}
	    }
	}
	stage('Infotiv Launcher Unit Tests') {
	    steps {
		sh 'python3 -m pytest -v -s test/infotiv_launcher/test_automated_functions.py'
		sh 'python3 -m pytest -v -s test/infotiv_launcher/test_launch_functions.py'
		sh 'python3 -m pytest -v -s test/infotiv_launcher/test_lift_functions.py'
		sh 'python3 -m pytest -v -s test/infotiv_launcher/test_pitch_functions.py'
		sh 'python3 -m pytest -v -s test/infotiv_launcher/test_rotation_functions.py'
		sh 'python3 -m pytest -v -s test/infotiv_launcher/test_variable_update_functions.py'
	    }
	}
    }
}
